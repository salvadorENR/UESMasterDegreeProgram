#********************* R Code for Sample Size Calculation for a Finite Population and Stratified Sampling ******************************************
# Parameters
N <- 1500 # Total population size
p <- 0.5  # Proportion (expected proportion in the population)
Z <- 1.96 # Z-value for 95% confidence level
E <- 0.05 # Margin of error

# Sample size calculation for a finite population
n <- (N * Z^2 * p * (1 - p)) / ((E^2 * (N - 1)) + (Z^2 * p * (1 - p)))
n <- ceiling(n) # Round up to the nearest whole number

# Output the sample size
print(paste("Sample size:", n))

# Stratified sampling with proportional allocation
N_h <- c(20, 22, 28, 13, 19, 13, 28, 14, 26, 19, 27, 25, 17, 18, 21, 23, 18, 16, 30, 20) # Population sizes in each stratum
n_h <- (N_h / N) * n # Sample size for each stratum
print("Sample size for each stratum:")
print(n_h)

#********************************************* Ley de los grandes nÃºmeros *******************************************************************

# Configuraci?n inicial
set.seed(123)  # Fijar semilla para reproducibilidad
n_lanzamientos_list <- c(10, 100, 1000, 10000)  # Diferentes tama?os de muestra
colors <- c("blue", "green", "orange", "purple")  # Colores para los gr?ficos

# Configuraci?n del layout para m?ltiples gr?ficos (4 gr?ficos)
par(mfrow = c(2, 2))

for (i in 1:length(n_lanzamientos_list)) {
  n_lanzamientos <- n_lanzamientos_list[i]  # Escenario actual
  resultados <- sample(c(0, 1), size = n_lanzamientos, replace = TRUE, prob = c(0.5, 0.5))  # Simular lanzamientos
  
  # C?lculo de la proporci?n acumulada de caras
  proporcion_caras <- cumsum(resultados == 0) / (1:n_lanzamientos)
  
  # Gr?fico para visualizar la convergencia
  plot(1:n_lanzamientos, proporcion_caras, type = "l", col = colors[i], 
       xlab = "N?mero de lanzamientos", ylab = "Proporci?n de caras", 
       main = paste("n =", n_lanzamientos), ylim = c(0, 1))
  abline(h = 0.5, col = "red", lwd = 2)  # L?nea que representa la proporci?n te?rica (0.5)
}

#Explanation:
#This block calculates the sample size for a finite population using the given parameters, such as population size, confidence level, and margin of error.
#Then, it performs proportional allocation for stratified sampling by calculating the sample size for each stratum proportionally to the population size of that stratum.

#*********************************************** R Code for Selecting Stratified Samples Using the sampling Package *********************************
# Install and load the necessary package
install.packages("sampling")
library(sampling)

# Simulated dataset
muestra_estratos_datos <- read.csv("muestra_estratos_datos.csv", sep = ";", header = TRUE)

# Total sample size
n_total <- 306

# Sample sizes for each stratum (based on the previous calculation)
tamanhos <- c(4, 4, 6, 3, 4, 3, 6, 3, 5, 4, 6, 5, 3, 4, 4, 5, 4, 3, 6, 4)

# Select the stratified sample using the strata() function
muestra <- strata(muestra_estratos_datos, c("tipo_modelo", "grupo", "flag_aci"), size = tamanhos, method = "srswor")

# Display the selected sample
print(head(muestra))

# Get the selected sample data
muestra_elegida <- getdata(muestra_estratos_datos, muestra)

# Display the selected sample
print(muestra_elegida)

# Save the selected sample to a CSV file
write.csv(muestra_elegida, file = "muestra_estratos.csv", row.names = FALSE, sep = "\t", quote = TRUE)

#Explanation:
#This block uses the sampling package to select a stratified sample from a dataset.
#It assigns the sample sizes for each stratum and uses the strata() function to perform the sampling. The results are saved in a CSV file for further use.


# Establecer los par?metros
set.seed(123)  # Fijar semilla para reproducibilidad
n <- 30        # Tama?o de la muestra
mu <- 5        # Media verdadera
sigma <- 2     # Desviaci?n est?ndar verdadera
rep <- 100      # N?mero de simulaciones
alpha <- 0.05  # Nivel de significancia (intervalo de confianza del 95%)

# Almacenar resultados
contiene_mu <- logical(rep)  # Variable para almacenar si el intervalo contiene mu o no (1,0)
Li <- numeric(rep) # Limites inferiores de los intervalos
Ls <- numeric(rep) # Limites superiores de los intervalos

# Simulaci?n
for (i in 1:rep) {
  muestra <- rnorm(n, mean = mu, sd = sigma)  # Generar muestra
  media_muestral <- mean(muestra)               # Calcular media muestral
  error_margin <- qnorm(1 - alpha/2) * sigma / sqrt(n)  # Margen de error (z * sigma / sqrt(n))
  
  # Limites del intervalo de confianza
  Li[i] <-media_muestral - error_margin
  Ls[i] <-  media_muestral + error_margin
  
  # Verificar si el intervalo contiene la media verdadera
  contiene_mu[i] <- Li[i] <= mu & Ls[i] >= mu
}

# Calcular porcentaje de intervalos que contienen la media verdadera
porc_intevalos <- mean(contiene_mu) * 100
cat("El porcentaje de intervalos que contienen la verdadera media es:", porc_intevalos, "%\n")


par(mfrow = c(1, 1))
# Gr?fico para visualizar los intervalos
plot(1:rep, Li, ylim = range(c(Li, Ls, mu)), 
     xlab = "Simulaci?n", ylab = "Intervalo de confianza", pch = "-", col = "blue")
points(1:rep, Ls, pch = "-", col = "blue")
abline(h = mu, col = "red", lwd = 2, lty = 2)  # L?nea roja en la verdadera media
title(main = "Intervalos de confianza (95%) en 1000 simulaciones")
legend("topright", legend = c("Contiene mu", "No contiene mu"), 
       col = c("blue", "red"), lty = c(1, 1), bty = "n")

# A?adir color para los intervalos que no contienen la media verdadera
for (i in 1:rep) {
  if (!contiene_mu[i]) {
    segments(i, Li[i], i, Ls[i], col = "red", lwd = 2)
  } else {
    segments(i, Li[i], i, Ls[i], col = "blue", lwd = 2)
  }
}










